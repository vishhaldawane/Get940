

	team1 = member1 +  member2 + member3 + member4 + member5
	|	  |		|	|	|	| 	
	airline  TL 89		64 	90	80	85

			8	8	8	8	8   = 32 hrs per day
		





			Readers are Leaders

		Java Programming Language (not spoken)
		|	 |		|
		brand	set of 		communicate
			instructions		|
				-------------------------------
				|	|	|	|
				listen	speak	read	write	
				<--concepts-->  <--program--->	
				ear	1	eye	hand+pencil+paper

	laugh / cry
		|
		listen 2/3
			
					- with Vishhal





	minimum unit of java programming language is "to write a class"


				       account <-- table -- DATA LAYER - 1


	class BankAccount 		<-- PlainOldJavaObject layer --- 2 
	{
		int accountNumber;  	<-- similar to acno of account table
		String accountHolder;	<-- similar to acholder of account table
		double accountBalance;	<--- similar to acbalance of account table
 
	}


class BankAccount { <== business entities 
		int accountNumber;  	
		String accountHolder;	
		double accountBalance;	

		void withdraw(double amountToWithdraw) 	{
			accountBalance = accountBalance - amountToWithdraw;
		}
		void deposit(double amountToWithdraw)	{
			accountBalance = accountBalance + amountToWithdraw;
		}
 
	}


Bank.java <-- human readable source code
==========
	
	class BankAccountTest 	{
	
	   available	  no return 
	   to the internet	|    varchar2	arguments passed here if req
		|		|         |	 |
		public static void main(String args[]) 	{
			System.out.println("Hello Banking...");
		}
	}


	1. compile 
		javac Bank.java
			|
			BankAccountTest.class <-- a separate file is generated
	2. Run
		java Bank <-- will give error --cause no such class present
		java BankAccountTest <-- will run <-- cause it has the main








Company		Intel		Sun/Oracle	Hp	 Apple	  IBM	Any
		|		|		|	  |	  |	|
CPU		x86		SParc		HpSeries PowerPc  BB	Any
		|		|		|	 |	  |	|
O/S		MS-windows	Solaris		HpUx	 Mac	  AIX	Linux
		|		|		|	 |	  |	|
compiler   Visual Studio C++	cc1		cc2	 cc3	  cc4	gcc5
		|
		First.cpp	YES		YES	YES	YES	YES
		|ASCII
compile		First.obj	First.o		X	X	X	X
		|machine
linker		First.exe ----> First.out	X	X	X	X
		|machine
		You run it





Company		Intel		Sun/Oracle	Hp	 Apple	  IBM	Any
		|		|		|	  |	  |	|
CPU		x86		SParc		HpSeries PowerPc  BB	Any
		|		|		|	 |	  |	|
O/S		MS-windows	Solaris		HpUx	 Mac	  AIX	Linux
		|		|		|	 |	  |	|
JRE/JVM		JVM		JVM		JVM	JVM	JVM	JVM
		|		|JRE		|	|	|	|
		First.java	|		|	|	|	|
		|ASCII		|
compile/javac	First.class ->	First.class ->First.class->	->	->
		
interpret/java
	
	


		BankApplication
		|getBalance()
	--------------------------------------------
	|	|	|	|	|
	ATM	PC	Visa	Phone	SmartPhone
		|
		Browser
	



	jdk1.8	or jdk11	or 	jdk14	or	jdk16



	Naming Conventions
	----------------------


PascalCase	ClassName	DriverManager	GodIsNowHere
		
camelCase	variableName	rollNumber,     personalAccountNumber, name

camelCase	methodName	getBalance(),   setLookAndFeel()

ALLCAPS		CONSTANT	PI	SPEED_OF_LIGHT  MAX MIN NORM

allsmall	packages.packages2	java.lang  java.lang.reflect  java.awt







		step1. start cmd prompt ( windows command prompt)
		step2. mkdir myjava  (make directory)
		step3. cd myjava  (change directory)
		step4. notepad Bank.java
			|
			class BankAccountTest  {
			public static void main(String args[])	{
					System.out.println("Welcome to the world of banking....");
				}		
			}
		step5. javac Bank.java
		step6* if javac is not running/not working/not found
		set path="c:\Program Files\Java\jdk1.8.0_211\bin";%path%
		step7. dir
		step8. java Bank <-- wont run
		step9. java BankAccountTest <-- would run/since main is there





			
	Java Features
	==================
	
	1. Simple
		
	2. Platform neutral - .class file (not the JVM)
		PORTABLE/WORA

	3. Object Oriented (OOPS)

	4. Robust 
		- ability of garbage collection
		- exception handling

	5. Multithreaded

	6. Secured

	7. Dynamic
	
	8. Distributed


	@Entity
	class Ticket
	{
		@Id
		int ticketNumber;

	}


				Java 
				|
		------------------------------------------	
		|		|		|
		JSE		JEE		JME
		| core java	| enterprise	  micro
	------------	---------------------------	
	|		|			|
lang fundas		WEB			EJB (bean/class/component)
			|			|	      DB
oops			|			|	       |	
packages		Servlet		-----------------------|------------
exception		JSP		|Spring		|Hibernate	|JMS
multithreading		|		Session		Entity	     Message
generics		Angular(client) |		|pk/fk		|
collection		(html/css/ts) ------------	---------	---------
file i/o			      |        |	|	|	|	|
jdbc				Stateless  Stateful	BMP	CMP	SMS	Mail
|			bookmyshow.com/app	|	persistence	ticket  ticket/PDF
Adv Java			|sigup	   signin    insert/update/delete
|				You
		Ticket | Passenger | Flight | Address 
Networking
  socket programming
RMI
 Remote method invocation


		Patient should be alive ( and in better condition )
		only then the operation/surgery is successful

		

		5 people
		|airlines 		physical/mental/emotional/spiritual
		|			body    + mind   + heart     + soul
		|
	--------------------------------------
	|	|	|	|	|
	1	2	3	4 	5		DAO 
			|		|		abstract classes
			able		able		interfaces
			|		|		subquery
			joining		joining		angular compo
			business	business	spring dao/jdbc
			|		|
			banking		insurance
		


	snacks vending machine		vs	snacks shop
	|					|
	no shopkeeper				shopkeeper MUST BE HERE
	|					|
	1. select the snack
	2. submit the cash
	3. dispense the snack
	4. it will manage the inventory

	5. at the end of the day
		it will create a
	computerized report to be 
	mailed to the supplier
	
		
			Persistence ( store the object into the DB)

		BMP			CMP
		|			|
		java developer		ready program - ORM - hibernate


java	insert	DB			insert .... flight
	select				insert .... insurance
	insert				insert ...  bank
	insert				insert ...  crop
	update 				insert .... student
	delete
	update

	class Passenger --------> passenger table
	{
		userid
		address
		name
		birthdate
		email
	}
	class Ticket ---------> ticket table
	{
		id
		source
		target
		cost
		category
	}
	class Payment ------------> payment table
	{
		Passenger
		Ticket
		amount
		mode
	}
	





	Data Types
	--------------------


		Primitive Types			Object Types
		|					|
---------------------------------------------	------------------
|		|	|		|			|
Integral	Float	character	Boolean			Object
|		|	     |		|			|				|
byte  1		float  4   char 2   boolean 1			String (varchar2)
short 2		double 8		false/true
int   4
long  8

				    <-------------------256------------------>
	byte rollNumber=128;  <--- -127 -126 ... -3 -2 -1 0 1 2 3 4 ... 127--->

				 -32767 .........-3 -2 -1 0 1 2 3  ....32767-->

	short rollNumber=32768

	int rollNumber;  ....

	long rollNumber; 



	BankAccount baRef = new BankAccount();


		
	stack					heap
	|					|
	local variables				free store / DMA

				DATA MEMBER/FIELD AREA:
				bankAccountNumber
				 |	bankAccountHolder
				 |         |		 bankAccountBalance
				---------------------------------
				|	|		|	|
				---------------------------------
	   +------------------- 34580 <-- memory address of this object
	   |		
	+--|----+			METHOD AREA:
	| 34580	|<--VALUE		setBankAccount(...)
	+-------+			showBalance()
	  |				withdraw(.) / deposit(.)
	 baRef
  IT IS JUST A REFERENCE
	TO AN OBJECT


		byte b3=120;

	+-------+
	| 120	| <-- this is a business data/ rollnumber/marks/score
	+-------+
	b3













	

	Array
	----------
		group of variables of the same type
		stored in consecutive memory location
		referred by a common name


	int score[5]; <-- declaration with size

	int score[] = {10,20,30}; <-- declaration cum initialization



	BankAccount allAccounts[] = new BankAccount[5];

	allAccounts[0] = new BankAccount();
	allAccounts[0].setBankAccount(101, "Julie",500000);
		
	allAccounts[1] = new BankAccount();
	allAccounts[1].setBankAccount(102, "Julia",600000);
				
5 references to BankAccount		
	|				<--BankAccount----------->
	allAccounts[]			acno     achn	 acbal
	---------			-------------------------
	0|	------------------------|	|	|	|	
	 |1234	|			-------------------------
	 |      |			1234
	 |	|			<--BankAccount----------->
	 |	| 			acno	achn	acbal
	---------			-------------------------
	1|9090	----------------------- |	|	|	|
	 |	|			-------------------------
	---------			9090
	2|	|
	---------
	3|	|			METHODS
	---------			------------
	4|	|			setBankAccount()
	---------			withdraw() /deposit() /showBankAccount()

		allAccounts[0].showAccount();
		allAccounts[1].showAccount();




	Procedure Oriented Programming System = POPS

	functions <--- data  | hair cutting in a saloon
	cutting() <--- size/style
	enteringIntoLocalTain() <----- seat
	top to bottom approach


	Object Oriented Programming System = OOPS

	data <--- functions
	size/style <-- cutting()
	bottom to top approach
	seat <--- enteringIntoExpressTain()


	

			panCard	

	bankName	bankAddress	accountHolderAddress
				creditLimit
	interestRate				accountHolderEmail
				bankBalance
	accountHolderName			accountHolderMobileNumber

		bankAccountNumber	maturityYear

				overdraftLimit		ifscCode

	birthdate		branchCode

		fixedDepositInterestRate	emi	loanDate   loanAmt

	creditCardInterestRate		loanAccountNumber


	void changeAddressOfCustomer(String newAddress)
	{
		accountHolderAddress = newAddress;
		accountHolderName = newAddress;
	}
	void withdraw(float amt)
	{
		bankBalance = bankBalance-amt;
		loanAmt = loanAmt + amt; // out of contract
		
	}
	void printBankAccount() 
	{
		
	}
		the function is behaving out of contract

contract of a class = association of data with its concerned functions




	Cloth <--> Tailor => Shirt
	|	    |
	data   activities
	|
	Customer
	|
	Intention
				Algorithm		

		1. measuring the requirement 

			measuring tape + measure()
			|		  |
			body		 paper + pencil

			paper is initialized with 1,2, 3,4,5,6,...12 numbers
						  |    |
						36(38) 16(18) -- insert/update/select
			(very imp numbers )

		2. making a "cutting diagram" on the cloth
				specialChalk to mark on the cloth
				scale 

			refer the paper (very often) - read only


		3. start cutting the cloth as per the "cutting diagram"

			scissors - once its over ==> cloth pieces


		4. collect logical pieces to stitch together

			needle + thread + stitching maching
			scissors 

		5. shirt is ready to deliver





		cloth + specialChalk



		accessor  and mutator

		
		0 1 2 3 4 5 6 7 8 9 10 11
		--------------------------
		| | |38 | |18 | || | | | |
		--------------------------



			takeMeasure()  writeMeasurements()

				readMeasurements()

		cuttingAsPerDiagram()	drawDiagramAsPerMeasurements()

				stitchingLogicalPieces()




		class  Measure
		{
			measureTape + paper (mutation) + pencil
			  +
			takeMeasure() 
			writeMeasurements()
		}

		class Diagram
		{
			chalk + cloth +   paper(readonly)
			readMeasurements()
			drawDiagramAsPerMeasurements()
		}
	
		class Cutter
		{
			cloth pieces + scissor
			cuttingAsPerDiagram()
		}
		class Stitcher
		{
			logical pieces + needle + thread
			stitching machine

			stitchIt() 
		}





	acno		acno			acno		acno
	acbal		acbal			acbal		acbal
	acholder	acholder		acholder	acholder 55 days
			interest		overdraft	creditlimit
	interest	maturityyear				interestrate 40%
	SavingsAccount	FixeDepositAccount  CurrentAccount 	CreditAccount
						100000

			









		blackboard + chalk + duster

		whiteboard + markerPen + duster
















	AtmEngineer*
	|
	AtmMAchine is an object for us
	 |	|
	 |	EndUser*
	 |
-----------------------
|		|
data		function
|		|
cash		withdraw()
totalCash	X
 <-- private
numberOfHits	X
 <-- private
		dipTheCard() -> lockCard() <-- private
				->loggingInUser()  <-- private
					-> printItOnPaper() <-- private
						presentTheMenu()
			


	OOPS Features
	===============

	1. Abstraction (what is your father? : he is in police)
		it is the "What is ? " part of an object
		it hides the complexity of an object
		and provides the simple accessible functions to use it

		a. data abstraction ( hide the data )
		b. procedural abstraction ( hide the data )

	2. Encapsulation (how is it? : police profile : 
		-it is the "How is it ? " part of an object
		-it is the complexity of an object
		-it provides all the data + contractual functions 
		for end users as well as the overall architecture	

	3. Polymoprhism 
		ability of a business entity to have multiple forms

			compile time polymorphism <== is a wrong term

			a. class extension
			
	d.diagnose(); //compile time awareness
	s.diagnose();//compile time awareness
	h.disgnose();//compile time awareness

	Doctor d = new Doctor();
	d.diagnose(); //compile time awareness of Doctor's diagnose
	d = new Surgeon();
	d.diagnose(); //compile time awareness of Doctor's diagnose
	d = new HeartSurgeon();
	d.diagnose(); //compile time awareness of Doctor's diagnose

				Doctor
				  |diagnose(){ ENT }
			-----------------------
			|	
		    Surgeon
			|diagnose(){ ENT + CTSCAN}
		----------------------------------
		|		|		|
	HeartSurgeon	 NeuroSurgeon	OrthoSurgeon
	diagnose(){ ENT +CTSCAN + MRI + 2DECHO + CARDIOGRAPH }

			b. compile time binding- early
 
				- function overloading
					a. data type
					b. number of arguments
					c. sequence of data types
					
				Person p = new Person();
				p.setPerson('M');
				p.setPerson(23);
				p.setPerson("Julie");

			c. runtime binding - polymorphism

				"runtime polymorphism" - invalid term
			

	4. Inheritance

		ability to "acquire properties" from existing business entities

		DERIVATION			IMPLEMENTATION	
		|				|
		|				Animal
		|				| eatFood(); //declared
		|				Mammal
		|				| giveBirth(); //declared
		Person				Human
		| 				| think(); //declared
		|				|
		Student				Person
		|				| talk(){}
		Employee			Student
						 study() { }

			a. single level

			b. multi level

			c. multiple level

			d. hierrchical level

		class Person
		{
			gender age name
			ctrs
			show
		}
		class Student extends Person [ inherits all the content of Person ]
		{
			gender age name + roll phy chem maths eng1 eng2 eng3 total per grade
		}


	Person p = new Person();
	Student s = new Student();
					<-------Person---------->
					gender   age     name
					-------------------------
					| M	| 22	|Peter	|
					-------------------------
		+-----------------------100
		|				Person() Person(...)
		100				showPerson()
		p

				<----------------------Student--------------------------->
				<-------Person---------->
				gender   age     name   |roll cn  p  c  m   e1 e2 e3  t  p  g
				--------------------------------------------------------------
				| M	| 22	|Peter	|   | 8 |   |  |  |  |  |  |  |  |  |
 				--------------------------------------------------------------
		+---------------100			      
		|					     
		100
		s1


			<----------------------Student--------------------------->
				<-------Person---------->
				gender   age     name   |roll cn  p  c  m   e1 e2 e3  t  p  g
				--------------------------------------------------------------
				| M	| 22	|Peter	|   | 8 |   |  |  |  |  |  |  |  |  |
 				--------------------------------------------------------------
		+---------------200			      
		|					     
		200
		s2

				<----------------------Student--------------------------->
				<-------Person---------->
				gender   age     name   |roll cn  p  c  m   e1 e2 e3  t  p  g
				--------------------------------------------------------------
				| M	| 22	|Peter	|   | 8 |   |  |  |  |  |  |  |  |  |
 				--------------------------------------------------------------
		+---------------300			      
		|					     
		300
		s3

			String pool SRM COllege
				    |	
				    8
=================================================================

But what if the collegeName is declared as static?


			String pool collegeName
					|
				   "SRM COllege"
				    |	
				    8


				<----------------------Student--------------------------->
				<-------Person---------->
				gender   age     name   |roll p  c  m  e1 e2 e3  t  p  g
				--------------------------------------------------------------
				| M	| 22	|Peter	|   |  |  |  |  |  |  |  |  |  |
 				--------------------------------------------------------------
		+---------------100			      
		|					     
		100
		s1


			<----------------------Student--------------------------->
				<-------Person---------->
				gender   age     name   |roll p  c  m   e1 e2 e3  t  p  g
				--------------------------------------------------------------
				| M	| 22	|Peter	|   |  |  |  |  |  |  |  |  |  |  |
 				--------------------------------------------------------------
		+---------------200			      
		|					     
		200
		s2

				<----------------------Student--------------------------->
				<-------Person---------->
				gender   age     name   |roll p  c  m e1 e2 e3  t  p  g
				--------------------------------------------------------------
				| M	| 22	|Peter	|   |  |  |  |  |  |  |  |  |  |  |
 				--------------------------------------------------------------
		+---------------300			      
		|					     
		300
		s3


	Person p = new Person();  age birthdate gender
	Student s = new Student(); marks grade 
	Employee e = new Employee(); salary, desg, dept
	|
	|		--apply	--------->
	A				B	


	super()   - a call to the nearest super class constructor	
			from a constructor
		  - must be the first line in the child class ctor

	super.		- a call to the nearest super class method/function
			from any other function
			- can be anywhere in the child class method






	5. Object communication
















	

	
	Object = state + behaviour
		 |	   |
	object=	data	functions


	savingsAccount's = balance <==  withdraw() / deposit()
	object



	class 				Object
	|				|
	.java file/text file		running memory entity
	|				|
	class BankAccount		BankAccount ba = new BankAccount()	()
	{
	    data + functions		stack + heap diagram
					|	  data + functions	
	}				ba
	|				|
	design of an "object"		instance of a "class"
	|				|
	LOGICAL	TEXT 	-> JVM	->	PHYSICAL IN THE MEMORY
	



		Person p1. ...


		p1.set(...peter) -- we want to invoke this once
		p1.show
		p1.set(...smith) -- invoked again
		p1.show
		

		so lets bypass this set method
		and focus on Constructor 



	Constructor 

		- it has the same name as of the "enclosing class"

		- it is invoked during the instantiation process
	
		- if the constructor invocation is successful, then
		  the new keyword is also successful.
		- if the constructor failed/terminated/throws exceptions
		  then the new keyword would also fail

		- constuctor has no return type

		- but it can take arguments/parameters, hence it can be
			overloaded

		- every class is provided with 
			an implicit/default ctor/implicit no-arg ctor

		- this implicit/default ctor is NOT provided, if the
		developer provides any explicit ctor

		-either you can have implicit or explict, but not both

		- the purpose of ctor is to initialize teh
		  state of an object

		- it is invoked ONCE per object

		- once the object is created, then
		the ctor can never be called for that object

		Data type	Object Reference
			|	|
			Person p1 = new Person();
				    |	  |
				    |	  constructor 
				    |
				allocator of java 	
				to allocate gender,age and name in heap
				|
	if the constructor is failed/terminated/exception thrown from it
	then the allocator will rollback the data(gender,age,name)


	


	class Human extends Mammal <--Whole
	{
		Heart h = new Heart(); //hasA <-- part

	}

	class Car extends LandVehicle <-- whole
	{
		Wheel w[] = new Wheel[4]; <-- hasA <-- part of a car (mandate)

	}
	class Microwave extends Machine
	{
		HeatingCoil ht = new HeatingCoil();

	}
	class WashingMachine extends Machine
	{
		WashingTub wt = new WashingTub();

	}
			   Association 
				|		
		----------------------------------
			|	|	|	|
			isA	hasA	usesA	producesA
			<structural>	<-functional->


				Person
				| gender,age,name
				| PanCard <-hasA
				| Tea prepareTea(TeaPowder tp, Sugar s, Milk m, Water w, GasStove gs,Pot p)          
			--------+
			| isA
		     Student
			| rollno,marks
			| MarkSheet <-hasA
			| Notes  study(NoteBook nb, Pen p)
		--------+
		| isA
		| 
	    Employee
		|empno,salary
		|SalarySlip <-hasA
		|Project  prepareProject(Computer c, CaseStudy cs)		
		|
	----------------------------
			|
			SoftwareEmployee
			




		50 question
		|
	-------------------------------------
	|	|	|		|		
	oracle  java   html/css/js    angular
	|	|	|		|
	15	15	10		10 = 50
		|
	---------------------------------
	|	|	|	|	|
	3	3	3	3	3
	basic	oops	ex	coll	jdbc

	75

		25 easy
		15 intermediate
		10 difficult
	

		"dont know" <==  dont know

		exam	  |	SME	|	project
		MCQ		interact	perform
		8.30		1hour		day/night
		18:00
		



=====================================================


Day 3

======================================================================

		static		final		abstract
						(incomplete/partial)
======================================================================

  field	/	shared across	CONSTANT/	NA	10 rs coin?
  data		all objects 	IMMUTABLE
  member	of a class

----------------------------------------------------------------------

  method 	can refer	CANNOT BE	
		other static	OVERRIDDEN
		members

----------------------------------------------------------------------

  class		*		CANNOT BE
				EXTENDED

----------------------------------------------------------------------


packages
exception handling
collection

				kiteCount
				-------------
				|	|
				---------


 what is the memory diagram BEFORE the birth of k1!!!!

		Kite k1 = new Kite();

 below memory diagram after the birth of k1!!!!

destructor 



	new  <-- keyword is the allocator
	delete <-- keyword is teh de-allocator [ not in java ]

	Kite(...) { } <-- constructor
	~Kite() { } <-- destructor [ not in java ] - garbage collector

				kiteColor|kiteOwner|kiteLength
				--------------------------------
				| Red	 |Rita	   |50	      |
				--------------------------------
	+---------------------->100
	|
	100			
	k1				getKiteCount(){
						return kiteCount;
					}


				kiteColor|kiteOwner|kiteLength				
				--------------------------------
				| Yellow | Julie   | 40	      | 
				--------------------------------
	+---------------------->200
	|
	200			
	k2		

				kiteColor|kiteOwner|kiteLength			
				--------------------------------
				| Green	 | Ritesh   |30	      |
				--------------------------------
	+---------------------->300
	|
	300			
	k3		


				
				--------------------------------
				| 
				--------------------------------
	+---------------------->400
	|
	400			
	k4		
			





	Class members		vs		Object Members
		|				|
		STATIC				NON-STATIC
		|				|
		kiteCount			kiteColor
						kiteOwner
						kiteLength

	field->	shared 				per object 
		across all
		objects

     function->	used to ONLY refer		toString(), showKite(),	
		other static			kiteIsDown()
		members				CAN REFER BOTH STATIC AND
						NON-STATIC 




	

akash
hrutvik
pradnya
nakul
vanshika









	State TRUE or FALSE


		We can use this pointer in a static function








		Chess
		| moveKnite() { math...}
	--------------------
	|
	GraphicalChess
	|moveKnite() { gui...}




			BankAccount
			|
	-------------------------------------------
	|		|		|
	SavingsAccount	CurrentAccount	CreditAccount
	|
FixedDepositAccount
	|
FlexiFixedDepositAccount
	|
final FlexiTermFixedDepositAccount


		ArtGallery
		|
		----------------------
		|	
		various paintings are there
		|
	------------------
	|
	painting1
	| abstract drawing.. / not conrete / not complete / incomplete
	| primeMinister();
--------------------------
|	|	|	|
viewer1	viewer2	viewer3	viewer4	viewer5
|	 |	|	 |	 |
cloud	ghost  cotton	jungle	face


			ABSTRACT CLASS MEANT FOR INHERITANCE

	abstract class
		- a class with optional "partial contract"
		- WE CANNOT CREATE INSTANCE OF AN ABSTRACT CLASS
		- BUT WE CAN CREATE INSTANCE OF ITS CHILD (NON-ABSTRACT)

	- IT IS NOT NECESSARY TO HAVE ABSTRACT METHOD(S) IN AN ABSTRACT CLASS

	abstract function
	
		- partial contract of a class

		- extending non-abstract child MUST 
		   implement all the contracts of the abstract hierarchy


	abstract class BankAccount
	{
		void deposit(float amt) { } 
		void withdraw (float amt) { } 
	}

	class SavingsAccount extends BankAccount
	{

	}

		EngageInSky
			|
		-----------------------------------
		|	|			|
FlightCabinEngagement	GliderEngagement  ParaGlidingEngagement


			Payement <== no clue at all - Non-payement
			|
	----------------------------------------------------------------
	|		|		|			|
GooglePayment	CashPayement		ChequePayment	FundTransferPayment
 |								|
--------------------------------		-------------------------
|			|			|	|
ScanToPayGoogle  MobileNumberGooglePay	ImpsPayment	NEFTPayment
					(1 second)	(2 hours)

	    [noclue]Light
		| 
-----------------------------------------------------------------------
|		|		|		|		|
[Sun]Light	MoonLight	TubeLight	BulbLight	CandleLight

				|
			-------------------
			|		|
		PhilipsTubeLight	SuryaTubeLight

						Instrument <-- pure blurrrr 
						|use();
			------------------------------------------------------------------
			|								|
	abstract MusicalInstrument <-- think of this !!!blurrrrrr idea - clue	MedicalInstrument
		|									|
------------------------------
|abstract 		   |abstract 
StringMusicalInstrument  AirBasedMusicalInstrument
|	|	  |	    |
Guitar	Sitar	 Violin	   Flute
|		    |
ElectronicGuitar   Cello	


	if you find opposite of something--> then go for abstract

		
	are we living in duality here????


		hard   soft
		wet	dry

		bald	hairy
	beautiful	average looking girls

	   mountain	valley

		
		
		

