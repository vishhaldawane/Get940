

	team1 = member1 +  member2 + member3 + member4 + member5
	|	  |		|	|	|	| 	
	airline  TL 89		64 	90	80	85

			8	8	8	8	8   = 32 hrs per day
		





			Readers are Leaders

		Java Programming Language (not spoken)
		|	 |		|
		brand	set of 		communicate
			instructions		|
				-------------------------------
				|	|	|	|
				listen	speak	read	write	
				<--concepts-->  <--program--->	
				ear	1	eye	hand+pencil+paper

	laugh / cry
		|
		listen 2/3
			
					- with Vishhal





	minimum unit of java programming language is "to write a class"


				       account <-- table -- DATA LAYER - 1


	class BankAccount 		<-- PlainOldJavaObject layer --- 2 
	{
		int accountNumber;  	<-- similar to acno of account table
		String accountHolder;	<-- similar to acholder of account table
		double accountBalance;	<--- similar to acbalance of account table
 
	}


class BankAccount { <== business entities 
		int accountNumber;  	
		String accountHolder;	
		double accountBalance;	

		void withdraw(double amountToWithdraw) 	{
			accountBalance = accountBalance - amountToWithdraw;
		}
		void deposit(double amountToWithdraw)	{
			accountBalance = accountBalance + amountToWithdraw;
		}
 
	}


Bank.java <-- human readable source code
==========
	
	class BankAccountTest 	{
	
	   available	  no return 
	   to the internet	|    varchar2	arguments passed here if req
		|		|         |	 |
		public static void main(String args[]) 	{
			System.out.println("Hello Banking...");
		}
	}


	1. compile 
		javac Bank.java
			|
			BankAccountTest.class <-- a separate file is generated
	2. Run
		java Bank <-- will give error --cause no such class present
		java BankAccountTest <-- will run <-- cause it has the main








Company		Intel		Sun/Oracle	Hp	 Apple	  IBM	Any
		|		|		|	  |	  |	|
CPU		x86		SParc		HpSeries PowerPc  BB	Any
		|		|		|	 |	  |	|
O/S		MS-windows	Solaris		HpUx	 Mac	  AIX	Linux
		|		|		|	 |	  |	|
compiler   Visual Studio C++	cc1		cc2	 cc3	  cc4	gcc5
		|
		First.cpp	YES		YES	YES	YES	YES
		|ASCII
compile		First.obj	First.o		X	X	X	X
		|machine
linker		First.exe ----> First.out	X	X	X	X
		|machine
		You run it





Company		Intel		Sun/Oracle	Hp	 Apple	  IBM	Any
		|		|		|	  |	  |	|
CPU		x86		SParc		HpSeries PowerPc  BB	Any
		|		|		|	 |	  |	|
O/S		MS-windows	Solaris		HpUx	 Mac	  AIX	Linux
		|		|		|	 |	  |	|
JRE/JVM		JVM		JVM		JVM	JVM	JVM	JVM
		|		|JRE		|	|	|	|
		First.java	|		|	|	|	|
		|ASCII		|
compile/javac	First.class ->	First.class ->First.class->	->	->
		
interpret/java
	
	


		BankApplication
		|getBalance()
	--------------------------------------------
	|	|	|	|	|
	ATM	PC	Visa	Phone	SmartPhone
		|
		Browser
	



	jdk1.8	or jdk11	or 	jdk14	or	jdk16



	Naming Conventions
	----------------------


PascalCase	ClassName	DriverManager	GodIsNowHere
		
camelCase	variableName	rollNumber,     personalAccountNumber, name

camelCase	methodName	getBalance(),   setLookAndFeel()

ALLCAPS		CONSTANT	PI	SPEED_OF_LIGHT  MAX MIN NORM

allsmall	packages.packages2	java.lang  java.lang.reflect  java.awt







		step1. start cmd prompt ( windows command prompt)
		step2. mkdir myjava  (make directory)
		step3. cd myjava  (change directory)
		step4. notepad Bank.java
			|
			class BankAccountTest  {
			public static void main(String args[])	{
					System.out.println("Welcome to the world of banking....");
				}		
			}
		step5. javac Bank.java
		step6* if javac is not running/not working/not found
		set path="c:\Program Files\Java\jdk1.8.0_211\bin";%path%
		step7. dir
		step8. java Bank <-- wont run
		step9. java BankAccountTest <-- would run/since main is there





			
	Java Features
	==================
	
	1. Simple
		
	2. Platform neutral - .class file (not the JVM)
		PORTABLE/WORA

	3. Object Oriented (OOPS)

	4. Robust 
		- ability of garbage collection
		- exception handling

	5. Multithreaded

	6. Secured

	7. Dynamic
	
	8. Distributed


	@Entity
	class Ticket
	{
		@Id
		int ticketNumber;

	}


				Java 
				|
		------------------------------------------	
		|		|		|
		JSE		JEE		JME
		| core java	| enterprise	  micro
	------------	---------------------------	
	|		|			|
lang fundas		WEB			EJB (bean/class/component)
			|			|	      DB
oops			|			|	       |	
packages		Servlet		-----------------------|------------
exception		JSP		|Spring		|Hibernate	|JMS
multithreading		|		Session		Entity	     Message
generics		Angular(client) |		|pk/fk		|
collection		(html/css/ts) ------------	---------	---------
file i/o			      |        |	|	|	|	|
jdbc				Stateless  Stateful	BMP	CMP	SMS	Mail
|			bookmyshow.com/app	|	persistence	ticket  ticket/PDF
Adv Java			|sigup	   signin    insert/update/delete
|				You
		Ticket | Passenger | Flight | Address 
Networking
  socket programming
RMI
 Remote method invocation


		Patient should be alive ( and in better condition )
		only then the operation/surgery is successful

		

		5 people
		|airlines 		physical/mental/emotional/spiritual
		|			body    + mind   + heart     + soul
		|
	--------------------------------------
	|	|	|	|	|
	1	2	3	4 	5		DAO 
			|		|		abstract classes
			able		able		interfaces
			|		|		subquery
			joining		joining		angular compo
			business	business	spring dao/jdbc
			|		|
			banking		insurance
		


	snacks vending machine		vs	snacks shop
	|					|
	no shopkeeper				shopkeeper MUST BE HERE
	|					|
	1. select the snack
	2. submit the cash
	3. dispense the snack
	4. it will manage the inventory

	5. at the end of the day
		it will create a
	computerized report to be 
	mailed to the supplier
	
		
			Persistence ( store the object into the DB)

		BMP			CMP
		|			|
		java developer		ready program - ORM - hibernate


java	insert	DB			insert .... flight
	select				insert .... insurance
	insert				insert ...  bank
	insert				insert ...  crop
	update 				insert .... student
	delete
	update

	class Passenger --------> passenger table
	{
		userid
		address
		name
		birthdate
		email
	}
	class Ticket ---------> ticket table
	{
		id
		source
		target
		cost
		category
	}
	class Payment ------------> payment table
	{
		Passenger
		Ticket
		amount
		mode
	}
	





	Data Types
	--------------------


		Primitive Types			Object Types
		|					|
---------------------------------------------	------------------
|		|	|		|			|
Integral	Float	character	Boolean			Object
|		|	     |		|			|				|
byte  1		float  4   char 2   boolean 1			String (varchar2)
short 2		double 8		false/true
int   4
long  8

				    <-------------------256------------------>
	byte rollNumber=128;  <--- -127 -126 ... -3 -2 -1 0 1 2 3 4 ... 127--->

				 -32767 .........-3 -2 -1 0 1 2 3  ....32767-->

	short rollNumber=32768

	int rollNumber;  ....

	long rollNumber; 



	BankAccount baRef = new BankAccount();


		
	stack					heap
	|					|
	local variables				free store / DMA

				DATA MEMBER/FIELD AREA:
				bankAccountNumber
				 |	bankAccountHolder
				 |         |		 bankAccountBalance
				---------------------------------
				|	|		|	|
				---------------------------------
	   +------------------- 34580 <-- memory address of this object
	   |		
	+--|----+			METHOD AREA:
	| 34580	|<--VALUE		setBankAccount(...)
	+-------+			showBalance()
	  |				withdraw(.) / deposit(.)
	 baRef
  IT IS JUST A REFERENCE
	TO AN OBJECT


		byte b3=120;

	+-------+
	| 120	| <-- this is a business data/ rollnumber/marks/score
	+-------+
	b3













	

	Array
	----------
		group of variables of the same type
		stored in consecutive memory location
		referred by a common name


	int score[5]; <-- declaration with size

	int score[] = {10,20,30}; <-- declaration cum initialization



	BankAccount allAccounts[] = new BankAccount[5];

	allAccounts[0] = new BankAccount();
	allAccounts[0].setBankAccount(101, "Julie",500000);
		
	allAccounts[1] = new BankAccount();
	allAccounts[1].setBankAccount(102, "Julia",600000);
				
5 references to BankAccount		
	|				<--BankAccount----------->
	allAccounts[]			acno     achn	 acbal
	---------			-------------------------
	0|	------------------------|	|	|	|	
	 |1234	|			-------------------------
	 |      |			1234
	 |	|			<--BankAccount----------->
	 |	| 			acno	achn	acbal
	---------			-------------------------
	1|9090	----------------------- |	|	|	|
	 |	|			-------------------------
	---------			9090
	2|	|
	---------
	3|	|			METHODS
	---------			------------
	4|	|			setBankAccount()
	---------			withdraw() /deposit() /showBankAccount()

		allAccounts[0].showAccount();
		allAccounts[1].showAccount();




	Procedure Oriented Programming System = POPS

	functions <--- data  | hair cutting in a saloon
	cutting() <--- size/style
	enteringIntoLocalTain() <----- seat
	top to bottom approach


	Object Oriented Programming System = OOPS

	data <--- functions
	size/style <-- cutting()
	bottom to top approach
	seat <--- enteringIntoExpressTain()


	

			panCard	

	bankName	bankAddress	accountHolderAddress
				creditLimit
	interestRate				accountHolderEmail
				bankBalance
	accountHolderName			accountHolderMobileNumber

		bankAccountNumber	maturityYear

				overdraftLimit		ifscCode

	birthdate		branchCode

		fixedDepositInterestRate	emi	loanDate   loanAmt

	creditCardInterestRate		loanAccountNumber


	void changeAddressOfCustomer(String newAddress)
	{
		accountHolderAddress = newAddress;
		accountHolderName = newAddress;
	}
	void withdraw(float amt)
	{
		bankBalance = bankBalance-amt;
		loanAmt = loanAmt + amt; // out of contract
		
	}
	void printBankAccount() 
	{
		
	}
		the function is behaving out of contract

contract of a class = association of data with its concerned functions




	Cloth <--> Tailor => Shirt
	|	    |
	data   activities
	|
	Customer
	|
	Intention
				Algorithm		

		1. measuring the requirement 

			measuring tape + measure()
			|		  |
			body		 paper + pencil

			paper is initialized with 1,2, 3,4,5,6,...12 numbers
						  |    |
						36(38) 16(18) -- insert/update/select
			(very imp numbers )

		2. making a "cutting diagram" on the cloth
				specialChalk to mark on the cloth
				scale 

			refer the paper (very often) - read only


		3. start cutting the cloth as per the "cutting diagram"

			scissors - once its over ==> cloth pieces


		4. collect logical pieces to stitch together

			needle + thread + stitching maching
			scissors 

		5. shirt is ready to deliver





		cloth + specialChalk



		accessor  and mutator

		
		0 1 2 3 4 5 6 7 8 9 10 11
		--------------------------
		| | |38 | |18 | || | | | |
		--------------------------



			takeMeasure()  writeMeasurements()

				readMeasurements()

		cuttingAsPerDiagram()	drawDiagramAsPerMeasurements()

				stitchingLogicalPieces()




		class  Measure
		{
			measureTape + paper (mutation) + pencil
			  +
			takeMeasure() 
			writeMeasurements()
		}

		class Diagram
		{
			chalk + cloth +   paper(readonly)
			readMeasurements()
			drawDiagramAsPerMeasurements()
		}
	
		class Cutter
		{
			cloth pieces + scissor
			cuttingAsPerDiagram()
		}
		class Stitcher
		{
			logical pieces + needle + thread
			stitching machine

			stitchIt() 
		}





	acno		acno			acno		acno
	acbal		acbal			acbal		acbal
	acholder	acholder		acholder	acholder 55 days
			interest		overdraft	creditlimit
	interest	maturityyear				interestrate 40%
	SavingsAccount	FixeDepositAccount  CurrentAccount 	CreditAccount
						100000

			









		blackboard + chalk + duster

		whiteboard + markerPen + duster
















	AtmEngineer*
	|
	AtmMAchine is an object for us
	 |	|
	 |	EndUser*
	 |
-----------------------
|		|
data		function
|		|
cash		withdraw()
totalCash	X
 <-- private
numberOfHits	X
 <-- private
		dipTheCard() -> lockCard() <-- private
				->loggingInUser()  <-- private
					-> printItOnPaper() <-- private
						presentTheMenu()
			


	OOPS Features
	===============

	1. Abstraction (what is your father? : he is in police)
		it is the "What is ? " part of an object
		it hides the complexity of an object
		and provides the simple accessible functions to use it

		a. data abstraction ( hide the data )
		b. procedural abstraction ( hide the data )

	2. Encapsulation (how is it? : police profile : 
		-it is the "How is it ? " part of an object
		-it is the complexity of an object
		-it provides all the data + contractual functions 
		for end users as well as the overall architecture	

	3. Polymoprhism 
		ability of a business entity to have multiple forms

			compile time polymorphism <== is a wrong term

			a. class extension
			
	d.diagnose(); //compile time awareness
	s.diagnose();//compile time awareness
	h.disgnose();//compile time awareness

	Doctor d = new Doctor();
	d.diagnose(); //compile time awareness of Doctor's diagnose
	d = new Surgeon();
	d.diagnose(); //compile time awareness of Doctor's diagnose
	d = new HeartSurgeon();
	d.diagnose(); //compile time awareness of Doctor's diagnose

				Doctor
				  |diagnose(){ ENT }
			-----------------------
			|	
		    Surgeon
			|diagnose(){ ENT + CTSCAN}
		----------------------------------
		|		|		|
	HeartSurgeon	 NeuroSurgeon	OrthoSurgeon
	diagnose(){ ENT +CTSCAN + MRI + 2DECHO + CARDIOGRAPH }

			b. compile time binding- early
 
				- function overloading
					a. data type
					b. number of arguments
					c. sequence of data types
					
				Person p = new Person();
				p.setPerson('M');
				p.setPerson(23);
				p.setPerson("Julie");

			c. runtime binding - polymorphism

				"runtime polymorphism" - invalid term
			

	4. Inheritance

		ability to "acquire properties" from existing business entities

		DERIVATION			IMPLEMENTATION	
		|				|
		|				Animal
		|				| eatFood(); //declared
		|				Mammal
		|				| giveBirth(); //declared
		Person				Human
		| 				| think(); //declared
		|				|
		Student				Person
		|				| talk(){}
		Employee			Student
						 study() { }

			a. single level

			b. multi level

			c. multiple level

			d. hierrchical level

		class Person
		{
			gender age name
			ctrs
			show
		}
		class Student extends Person [ inherits all the content of Person ]
		{
			gender age name + roll phy chem maths eng1 eng2 eng3 total per grade
		}


	Person p = new Person();
	Student s = new Student();
					<-------Person---------->
					gender   age     name
					-------------------------
					| M	| 22	|Peter	|
					-------------------------
		+-----------------------100
		|				Person() Person(...)
		100				showPerson()
		p

				<----------------------Student--------------------------->
				<-------Person---------->
				gender   age     name   |roll cn  p  c  m   e1 e2 e3  t  p  g
				--------------------------------------------------------------
				| M	| 22	|Peter	|   | 8 |   |  |  |  |  |  |  |  |  |
 				--------------------------------------------------------------
		+---------------100			      
		|					     
		100
		s1


			<----------------------Student--------------------------->
				<-------Person---------->
				gender   age     name   |roll cn  p  c  m   e1 e2 e3  t  p  g
				--------------------------------------------------------------
				| M	| 22	|Peter	|   | 8 |   |  |  |  |  |  |  |  |  |
 				--------------------------------------------------------------
		+---------------200			      
		|					     
		200
		s2

				<----------------------Student--------------------------->
				<-------Person---------->
				gender   age     name   |roll cn  p  c  m   e1 e2 e3  t  p  g
				--------------------------------------------------------------
				| M	| 22	|Peter	|   | 8 |   |  |  |  |  |  |  |  |  |
 				--------------------------------------------------------------
		+---------------300			      
		|					     
		300
		s3

			String pool SRM COllege
				    |	
				    8
=================================================================

But what if the collegeName is declared as static?


			String pool collegeName
					|
				   "SRM COllege"
				    |	
				    8


				<----------------------Student--------------------------->
				<-------Person---------->
				gender   age     name   |roll p  c  m  e1 e2 e3  t  p  g
				--------------------------------------------------------------
				| M	| 22	|Peter	|   |  |  |  |  |  |  |  |  |  |
 				--------------------------------------------------------------
		+---------------100			      
		|					     
		100
		s1


			<----------------------Student--------------------------->
				<-------Person---------->
				gender   age     name   |roll p  c  m   e1 e2 e3  t  p  g
				--------------------------------------------------------------
				| M	| 22	|Peter	|   |  |  |  |  |  |  |  |  |  |  |
 				--------------------------------------------------------------
		+---------------200			      
		|					     
		200
		s2

				<----------------------Student--------------------------->
				<-------Person---------->
				gender   age     name   |roll p  c  m e1 e2 e3  t  p  g
				--------------------------------------------------------------
				| M	| 22	|Peter	|   |  |  |  |  |  |  |  |  |  |  |
 				--------------------------------------------------------------
		+---------------300			      
		|					     
		300
		s3


	Person p = new Person();  age birthdate gender
	Student s = new Student(); marks grade 
	Employee e = new Employee(); salary, desg, dept
	|
	|		--apply	--------->
	A				B	


	super()   - a call to the nearest super class constructor	
			from a constructor
		  - must be the first line in the child class ctor

	super.		- a call to the nearest super class method/function
			from any other function
			- can be anywhere in the child class method






	5. Object communication
















	

	
	Object = state + behaviour
		 |	   |
	object=	data	functions


	savingsAccount's = balance <==  withdraw() / deposit()
	object



	class 				Object
	|				|
	.java file/text file		running memory entity
	|				|
	class BankAccount		BankAccount ba = new BankAccount()	()
	{
	    data + functions		stack + heap diagram
					|	  data + functions	
	}				ba
	|				|
	design of an "object"		instance of a "class"
	|				|
	LOGICAL	TEXT 	-> JVM	->	PHYSICAL IN THE MEMORY
	



		Person p1. ...


		p1.set(...peter) -- we want to invoke this once
		p1.show
		p1.set(...smith) -- invoked again
		p1.show
		

		so lets bypass this set method
		and focus on Constructor 



	Constructor 

		- it has the same name as of the "enclosing class"

		- it is invoked during the instantiation process
	
		- if the constructor invocation is successful, then
		  the new keyword is also successful.
		- if the constructor failed/terminated/throws exceptions
		  then the new keyword would also fail

		- constuctor has no return type

		- but it can take arguments/parameters, hence it can be
			overloaded

		- every class is provided with 
			an implicit/default ctor/implicit no-arg ctor

		- this implicit/default ctor is NOT provided, if the
		developer provides any explicit ctor

		-either you can have implicit or explict, but not both

		- the purpose of ctor is to initialize teh
		  state of an object

		- it is invoked ONCE per object

		- once the object is created, then
		the ctor can never be called for that object

		Data type	Object Reference
			|	|
			Person p1 = new Person();
				    |	  |
				    |	  constructor 
				    |
				allocator of java 	
				to allocate gender,age and name in heap
				|
	if the constructor is failed/terminated/exception thrown from it
	then the allocator will rollback the data(gender,age,name)


	


	class Human extends Mammal <--Whole
	{
		Heart h = new Heart(); //hasA <-- part

	}

	class Car extends LandVehicle <-- whole
	{
		Wheel w[] = new Wheel[4]; <-- hasA <-- part of a car (mandate)

	}
	class Microwave extends Machine
	{
		HeatingCoil ht = new HeatingCoil();

	}
	class WashingMachine extends Machine
	{
		WashingTub wt = new WashingTub();

	}
			   Association 
				|		
		----------------------------------
			|	|	|	|
			isA	hasA	usesA	producesA
			<structural>	<-functional->


				Person
				| gender,age,name
				| PanCard <-hasA
				| Tea prepareTea(TeaPowder tp, Sugar s, Milk m, Water w, GasStove gs,Pot p)          
			--------+
			| isA
		     Student
			| rollno,marks
			| MarkSheet <-hasA
			| Notes  study(NoteBook nb, Pen p)
		--------+
		| isA
		| 
	    Employee
		|empno,salary
		|SalarySlip <-hasA
		|Project  prepareProject(Computer c, CaseStudy cs)		
		|
	----------------------------
			|
			SoftwareEmployee
			




		50 question
		|
	-------------------------------------
	|	|	|		|		
	oracle  java   html/css/js    angular
	|	|	|		|
	15	15	10		10 = 50
		|
	---------------------------------
	|	|	|	|	|
	3	3	3	3	3
	basic	oops	ex	coll	jdbc

	75

		25 easy
		15 intermediate
		10 difficult
	

		"dont know" <==  dont know

		exam	  |	SME	|	project
		MCQ		interact	perform
		8.30		1hour		day/night
		18:00
		



=====================================================


Day 3

======================================================================

		static		final		abstract
						(incomplete/partial)
======================================================================

  field	/	shared across	CONSTANT/	NA	10 rs coin?
  data		all objects 	IMMUTABLE
  member	of a class

----------------------------------------------------------------------

  method 	can refer	CANNOT BE	
		other static	OVERRIDDEN
		members

----------------------------------------------------------------------

  class		*		CANNOT BE
				EXTENDED

----------------------------------------------------------------------


packages
exception handling
collection

				kiteCount
				-------------
				|	|
				---------


 what is the memory diagram BEFORE the birth of k1!!!!

		Kite k1 = new Kite();

 below memory diagram after the birth of k1!!!!

destructor 



	new  <-- keyword is the allocator
	delete <-- keyword is teh de-allocator [ not in java ]

	Kite(...) { } <-- constructor
	~Kite() { } <-- destructor [ not in java ] - garbage collector

				kiteColor|kiteOwner|kiteLength
				--------------------------------
				| Red	 |Rita	   |50	      |
				--------------------------------
	+---------------------->100
	|
	100			
	k1				getKiteCount(){
						return kiteCount;
					}


				kiteColor|kiteOwner|kiteLength				
				--------------------------------
				| Yellow | Julie   | 40	      | 
				--------------------------------
	+---------------------->200
	|
	200			
	k2		

				kiteColor|kiteOwner|kiteLength			
				--------------------------------
				| Green	 | Ritesh   |30	      |
				--------------------------------
	+---------------------->300
	|
	300			
	k3		


				
				--------------------------------
				| 
				--------------------------------
	+---------------------->400
	|
	400			
	k4		
			





	Class members		vs		Object Members
		|				|
		STATIC				NON-STATIC
		|				|
		kiteCount			kiteColor
						kiteOwner
						kiteLength

	field->	shared 				per object 
		across all
		objects

     function->	used to ONLY refer		toString(), showKite(),	
		other static			kiteIsDown()
		members				CAN REFER BOTH STATIC AND
						NON-STATIC 




	

akash
hrutvik**
pradnya
nakul
vanshika
Sparsh 


		12	.	5
		0	.	0
		|		|
		whole		part
		







	State TRUE or FALSE


		We can use this pointer in a static function








		Chess
		| moveKnite() { math...}
	--------------------
	|
	GraphicalChess
	|moveKnite() { gui...}




			BankAccount
			|
	-------------------------------------------
	|		|		|
	SavingsAccount	CurrentAccount	CreditAccount
	|
FixedDepositAccount
	|
FlexiFixedDepositAccount
	|
final FlexiTermFixedDepositAccount


		ArtGallery
		|
		----------------------
		|	
		various paintings are there
		|
	------------------
	|
	painting1
	| abstract drawing.. / not conrete / not complete / incomplete
	| primeMinister();
--------------------------
|	|	|	|
viewer1	viewer2	viewer3	viewer4	viewer5
|	 |	|	 |	 |
cloud	ghost  cotton	jungle	face


			ABSTRACT CLASS MEANT FOR INHERITANCE

	abstract class
		- a class with optional "partial contract"
		- WE CANNOT CREATE INSTANCE OF AN ABSTRACT CLASS
		- BUT WE CAN CREATE INSTANCE OF ITS CHILD (NON-ABSTRACT)

	- IT IS NOT NECESSARY TO HAVE ABSTRACT METHOD(S) IN AN ABSTRACT CLASS

	abstract function
	
		- partial contract of a class

		- extending non-abstract child MUST 
		   implement all the contracts of the abstract hierarchy


	abstract class BankAccount
	{
		void deposit(float amt) { } 
		void withdraw (float amt) { } 
	}

	class SavingsAccount extends BankAccount
	{

	}

		EngageInSky
			|
		-----------------------------------
		|	|			|
FlightCabinEngagement	GliderEngagement  ParaGlidingEngagement


			Payement <== no clue at all - Non-payement
			|
	----------------------------------------------------------------
	|		|		|			|
GooglePayment	CashPayement		ChequePayment	FundTransferPayment
 |								|
--------------------------------		-------------------------
|			|			|	|
ScanToPayGoogle  MobileNumberGooglePay	ImpsPayment	NEFTPayment
					(1 second)	(2 hours)

	    [noclue]Light
		| 
-----------------------------------------------------------------------
|		|		|		|		|
[Sun]Light	MoonLight	TubeLight	BulbLight	CandleLight

				|
			-------------------
			|		|
		PhilipsTubeLight	SuryaTubeLight

						Instrument <-- pure blurrrr 
						|use();
			------------------------------------------------------------------
			|								|
	abstract MusicalInstrument <-- think of this !!!blurrrrrr idea - clue	MedicalInstrument
		|playMusic();									|
----------------------------------------
|abstract 		   	|abstract 
StringBasedMusicalInstrument  AirBasedMusicalInstrument
	|tuneStrings();
-------------------
|	|	  |	    |
Guitar	Sitar	 Violin	   Flute
|		    |
ElectronicGuitar   Cello	


	if you find opposite of something--> then go for abstract

		
	are we living in duality here????


		hard   soft
		wet	dry

		bald	hairy
	beautiful	average looking girls

	   mountain	valley

=======================================================


Exception handling 
---------------------

		exception = runtime error


				Errors
				|
	-------------------------------------------------------------------
	|		|		|		|		|
	syntax		library		runtime		logical		fatal
	|		|		|		|		|
	compile		.jar/,class	exception	a+b=8	VirtualMachineError
			files are
			missing

	
BL and EL  IS MIXED TOGETHER - OR SPREAD ACROSS THE JUNGLE OF IF..ELSE

	void fundTransfer(Savings source, Savings target, float amt)
	{
	1	search target <=BL
	2	if target found then
	3		search source <=BL
	4		if source found then
	5			find sufficient balance at source <=BL
	6			if suff balance found then
	7				withdraw from source <=BL
	8				deposit to target <=BL
	9			else
	10				insufficient balance at source <=EL
	11		else
	12			source not found <=EL
	13	else
	14	  	target not found <=EL
		
	}

	

	void fundTransfer(Savings source, Savings target, float amt)
	{
	1	search target <=BL
	2	if target NOT found then
	3		target not found <=EL	
	4	else
	5		search source <=BL
	6		if source NOT found then
	7			source not found
	8		else
	9			find sufficient balance at source <=BL
	10			if suff balance NOT found then
	11				insufficient balance at source <=EL
	12			else
	13				withdraw from source <=BL
	14				deposit to target <=BL
	}



	void fundTransfer(Savings source, Savings target, float amt)
	{
		try <== IT CONTAINS THE BL
		{
	1		search target <=BL
	2		search source <=BL
	3		find sufficient balance at source <=BL
	4		withdraw from source <=BL
	5		deposit to target <=BL
		}
			CATCH CLUSTER CONTAINS THE EL HANDLING LOGIC
	6	catch(if target NOT found then) then
	7		target not found <=EL
	8	catch(if source NOT found then) then
	9		source not found <=EL
	10	catch(if sufficient balance NOT AT source)
	11		insufficient balance at source <=EL
	}

			wk		SL2	
			
			   |||
			  DRAVID

		    SL1		SL3



			SAURAV 
			GANGULY



		OFFICE OFFICE
		
		
			main method of JVM
				|
	Exception in thread "main" java.lang.ArithmeticException: / by zero
	at DivideTest.main(DivideTest.java:14)
			|
		main method of your code




	your java code
	|			  (1)	   (2)			(3)
	+----------->  float z =  x/0; --> JVM --------------->  CPU
					    |		      |
			 ArithmeticException <-term signal<---+
						 (4)
			
			 e= new ArithmeticException ("/by zero"); (5)
			 throw e;  (6)

			 e is thrown towards your java code(7)
		
			if your code is catching it, then you have a 
			scope to show error and continue the execution (8)

			but if the thrown object is uncaught, then
			it is rethrown back to the JVM, (9)

			and JVM wont catch it, it terminates your app
			by showing exception message (10)




			Object
			|
	-------------------------------
		|	|	|
	   String   Flight	Throwable
				| String message; 
				| printStackTrace();
				| getMessage();
				|
		------------------------------------
			|		|
			Error		Exception
					| "checked"
		-------------------------------------------------------------------------------------------
		|			|		|		|			|
	RuntimeException		IOException	SQLException InsurancePaperException VehicleOnReserveFuelException RCBook PUCPaper DrivingLicence Cash 
		|"unchecked"			|
------------------------------		FileNotFoundException
|		    |	| |  |
ArithmeticException |	| | RedSignalDishonourdException
  NullPointerException  |TyreFlatException
	 getMessage();  |
	IndexOutOfBoundsException
			|
-----------------------------------------
|				   |
StringIndexOutOfBoundsException ArrayIndexOutOfBoundsException
		
			what if there is no fire at all

				Library
				|
		-----------------------------------------
		|				|
	fire-extinguisher			fire-extinguisher
	as cylinder				as sprinkler [ set up ]
		|				|
	well trained				do we need fire marshal here?
	fire marshal is required		
	to extinguish the fire

	un"checked" by the compiler		checked by the compiler 
		|				|
	RuntimeException			Exception
		




	String str=null;

	System.out.println("str in upper case is  : "+str.toUpperCase());

	



	RuntimeException and its children (unchecked) can be thrown
	by any method.

	void foo()
	{
		if (x==0)
			throw new RuntimeException();
	}

	But if you wish to throw Exception and 
	its children "checked" (except RuntimeException), then
	the method has to declare these exceptions
	in its throws clause

	void far() throws Exception,IOException,SQLException
	{
		if (y==0)
			throw new Exception();
		if(z==0)
			throw IOExcpetion();
		if(x==0)
			throw SQLException();
	}


	"checked exceptions" must be declared in the "throws" clause
	of a method "in order to throw" them


class Car
{
	void drive() throws InsurancePaperException,VehicleOnReserveFuelException
	{

		if(fuelCapacity<3) {
			throw new VehicleOnReserveFuelException("Oh no...my vehicle is reserve on fuel....");
		}

		if(myMemory<25) {
			throw new InsurancePaperException("Oh Car insurance is expired...");
		}

		if(tyreFlat==true)
			throw new TyreFlatException("Oh No..tyre is flat...now search for the nearest puncture repair place...");

		if(speed>80)
			throw new RedSignalDishonouredException("Oh No..Red signal dishonoured...now the penalty...");

	}
}

	main()
	{
		try
		{
			Car c = new Car();
			c.drive();
		}
		catch(TyreFlatException e) {
			handler for flat tyre
		}
		catch(RedSignalDishonouredException e) {
			handler for red signal
		}
		catch(InsurancePaperException e) {
			handler for insurance paper problems..
		}
		catch(VehicleOnReserveFuelException e) {
			handler for vehicle reserve fuel
		}
		catch(RuntimeException e ) {
			handler for any runtime other than above
		}
		catch(Exception e) {
			hander for any checked other than above
		}
		catch(Throwable t) {
			handler for error and exception too
		}
		catch(Object o) { //illegal

		}
		
	}


Krati - because they were unchecked 
Akash - father is driving the car







	Packages and Access specifiers
	-------------------------------

		similar to directories

		directory = to store files 

		packages = to store class files

	to make a package (java) = directory (operating system)
		   |				|
		package keyword		     mkdir / new folder

		jungle.tree			d:\jungle\tree (windows)
					/home/satish/jungle/tree (unix os)


mainpackage			jungle
				|
		-----------------------------------
		|	|	|		|
subpackage	tree	cave	river		JungleTest
		|	|	|		|
classes->	Bird	Tiger	Crocodile	main()
		Monkey	Lion

	to avail the classes from the packages
	use the import statement(subject to the availability)



	four access specifiers in java

			1.       <== default/accessible/friendly
				 within the same folder/package
				 
		
			2. public <== accessible everywhere
			3. private
			4. protected



		Doctor d = new Doctor();

		d.diagnose();


		d = new Surgeon();

		d.diagnose();


		Ken Arnold
		James Gosling : The Java Programming Language
		
		
	
		overriding
			|
		1. accessible
		2. instance specific

		-----------------------------
		|		|
		data		method
		Tiger		static void hunt() { }
		 privateA	jump() { }
		|
		WhiteTiger	jump() { } //accessible method is overridden
		 privateA	static void hunt() { }

				Tiger.jump(); //never be hidden
				WhiteTiger.jump(); //never be hidden


	java.lang.reflect <==reflection API 



	Generics and Collections
	|
	|
	Templates function / Template Classes
			


			Components Orthogonal Space
				
				 x - data type - int, float, char,String
				 |		Flight,Account,Employee ...
				 |
				/ \	1. ButterMilk
			       /   \	2. Noodles
			      /     \	3. Dal/FriedRice
			     /       \  4. Paneer Chilly/Manchurian
			    y--->i<---z
			    |	 |    |
		    Container	 |    Algorithm
		    |	       Iterator	|
	  int  array []		 |	search(int),  sort(int[]), compact()<-sameCode
	 float array []		 |	search(float), sort(float[]), compact()<-sameCode
	{0,10,45,0,30,60,25,0}	for()	 30
				 |
		this loop will help the Algorithm to iterate/traverse
		across the Container
	ButterMilk
	|
 1.	Glass			straw	drink(), stirr();
 2.	Bowl		   ChopSticks	eat()
 3.     Plate		        Spoon	eat()
 4.	Bowl			Fork	eat()


	Content + Container = wise selection
	 |		|
	type	   purpose

			Efficiency + flexibility
			|		|
			time		space

			
	

	Letter pad of LTI

		==============================
		   Larsen and Tubro Infotech
		   Address ; .....
		Reg.no. ....	Date : ...
		------------------------------

			main content.
			offer letter/ transfer letter
			promo letter/
			upraisal letter


		------------------------------
		Footer : .................
		==============================







	
	
	
			    Iterable  (i)  
				|Iterator iterator();
				|	
	?		   Collection  (i)
	|			|add(Object );
	?	---------------------------------------
	|		|duplicate	|unique
	?		List (i)	Set (i)
	|		|		|
	--------------------------	-------------------------
		|  linear	|	| non-linear	|
		|		|	|		|
	ArrayList	LinkedList	TreeSet		HashSet
	|add(){..}	|add(){..}	|add(){..}	|add(){..}
	|iterator(){}   |iterator(){}	|iterator(){}	|iterator(){}
	|		|		    |in/out	|in/out
 growable array	    growble/resize array   email	bookshelf
 at end 	     from the beg/end	  
		     /within
	|		|
holding logs 	  PhoneBook
			

				Instrument
					|use();
			-------------------------------------
			|				|
			Musical				Medical
			|playMusic()			|opearte()
	-----------------------------	---------------------------------
	|			|	|			|
	StringBased	  AirBased	SurgicalMedical	PathologicalMedical
	|tuneString();	    |blowAir();	|steralize();		|readIt();
	|		    |		|			|
	Guitar		    Flute	SurgicalCutter		ECGMAchine
	pluck();   operateSevenHoles();	   cut();		  plotCardio();

		Instrument i = new Guitar(); <-- String Based
		Instrument i = new Flute();  <-- Air Based
		Instrument i = new SurgicalCutter(); <-- Surgical Medical
		Instrument i = new ECGMachine(); <-- Pathological Medical


		Collection coll = new ArrayList();
		Collection coll = new LinkedList();
		Collection coll = new TreeSet();
		Collection coll = new HashSet();







		+-------+	+------+	+-------+
algorithms	|	|	|	|	|	|

                 
Iterator	 		 		|   |
		 		 		\   /
				   		   |
container	|  5	|	|  45	|	|   8	 |	
		+-------+	+-------+	+-------+














	1 2 8 14 3

		2
		|
	-------------------
	|L		|R
	1		8
			|
		------------------
		|		|	
		3		14



			1
			|
		-----------------
		|		|
				2
				|
			----------------
					|
					8
					|
			-------------------------
				|		|
				3		14








	layer1 - dbtables - normalized tables - emp, dept, customer, ord, item, product,price
	layer2 - pojo and jdbc
	layer3 - hibernate
	layer4 - service layer - core java 
	layer5 - spring controller - mvc
	layer6 - angular - UI

		Payee Name : Vishal
	        Ac no      : 123
		IFSC code  : ICICI0069
		+-----------+
		| Add Order |
		+-----------+


		View All Payee

		





		





			Collection <-- interface

				List
				|
			ArrayList 

	Collections <-- class [ utility class ]
		|
	static sort(jukeBox)


	Song mysongs[] = new Song[5]; <-- limited size

	mysongs[0]= new Song();
	mysongs[1]= new Song(); <-- u cannot delete any song
	mysongs[2]= new Song();
	mysongs[3]= new Song();
	mysongs[4]= new Song(); <-- last song 


	ArrayList<Song>	jukeBox = new ArrayList<Song>();
		   |
	-------------------------
	|	|	|	|
	title  artist  album   year
	<---String--------->   int
				0      1     2      3
				1996, 2019   2014, 1998

	class Song implements Comparable
	{
		public int compareTo(
	}

	Collections.sort(jukeBox);
		     |
		on what to sort????



	java.lang			java.util
	|				|
	Comparable			Comparator
	|				|
	int compareTo(Object o)		int compare(Object o1, Oject o2)
	|				|
	Employee e1...			Comparator cmp = ..implementation here;
	Employee e2....

	e1.compareTo(e2);		cmp.compare(e1,e2);
	e1.compareTo(e3);		cmp.compare(e1,e3);
					cmp.compare(e2,e2);





1) Hrushikesh Kondilkar : Bus Booking System
2) Pradnya : Airline Reservation




		Map - Key and Value


				Map <-- is not the collection 
				|
		--------------------------------------
			|		|
			TreeMap		HashMap
			(tree)		(hashtable)
			red/black



public class java.lang.Object {

  public java.lang.Object();

  public final native java.lang.Class<?> getClass(); 	REFLECTION

  public native int hashCode();			HASHCODE
  public boolean equals(java.lang.Object);	COMPARE OBJECTS

  protected native java.lang.Object clone() throws java.lang.CloneNotSupportedException; CLONING

  public java.lang.String toString(); STRING REPRESENTATION

  public final native void notify(); //MULTITHREADING
  public final native void notifyAll(); //MULTITHREADING
  public final native void wait(long) throws java.lang.InterruptedException; //MULTITHREADING
  public final void wait(long, int) throws java.lang.InterruptedException; //MULTITHREADING
  public final void wait() throws java.lang.InterruptedException; //MULTITHREADING

  protected void finalize() throws java.lang.Throwable; //GARBAGE COLLECTION

  static {};
}

class Book extends Object
{
	
}


=========================================================================

Business unit of LTI : minimum requirement from them is 
		that every student mustbe aware of CRUD opeartion in JDBC


	online session				physical session

	70 homes				1 classroom - 70
	|
	unique conditions			


	Trainer				1 2 3 4 5 .............. 69
	|				| | | | |
	talking				mute mute mute mute ....
	|				|	|	|	|
	all members in the proximity	all the people around the participant
	are mute			are always on unmute













	ODBC
	

	JDBC

		Java Database connectivity - API

			
		Business Logic
		Development			RDBMS
		|				|
		Java				relations (SQL / PLSQL )
		|				|
		classes				tables
		|				|
		data<-logic			sql + functions/procedures
		|				|
		LOGIC				DATA
		

following diagram is not of inheritance****


1. know ur database (ip        port / username / password / schema)
	Oracle*	   localhost + 1521 / system  /  manager / ??? )
        HSQLB
	MySQL
	MSSQLServer
	Sybase
	..
	..
2. know ur driver implementation

				Driver (interface)
				|  |
				| OracleDriver* - ojdbc6_g.jar
				|
		---------------------------------		
			|
		DriverManager
			|
3.		registerDriver(new OracleDriver());

4.		getConnection("dsn","username","password");
			|
			Connection
			|
	------------------------------------------
		|		|		|
		Statement  PreparedStatement CallableStatment
		select	insert/update/delete	proce/function
		|		|		|
5	  ResultSet		rows affected   output 

6. process the step number 5

7. close the result, close the statement, close the connection 




    create or replace procedure findCustomer(x IN number, y OUT varchar, z OUT varchar)
    as
    begin
      select name,city into y,z from customer where custid = x;
      exception when
      no_data_found then
            y:=null;
            z:=null;
   end;



  create or replace function findOrderTotal(x IN number) return number
    as
       total_order_cost number;
    begin
	select sum(total) INTO total_order_cost from ord where custid=x;
	return total_order_cost;
     exception when
      no_data_found then
            return -1;
   end;


=================


		String pool
			|
		common resource for all		

	empty coffee/tea PAPER cups in stacked manner

		pool of cups -- 5 empty cups in the POOL (2 left)

	once Ravi, Sameer, Rita
	     |	    |	    |
	    cup    cup     cup --> CACHE
	     |	    |	    |
	    pk     pk       pk 
		


	String month="January"; //immutable - not changeable

	String month1="January";

	String month2="January";


		
	StringBuffer - to make changes in the String  - mutation
	   |append()
	   | above method is synchronized method 
	---------
	|	|
	t1	t2

	StringBuilder - to make changes in the String - mutation
	   | append() - asynchronous
	------------
	|	   |
	t1	   t2


synchronous access of the water		asynchronous access of the water
human3					human3
   human2	BoreWell		
	human1 <-|		human2 	well  human1
	--------------------- 	----------------------------
		||			|
		||			|
		||80 feet		| 80 feet
		||			|
	--------|| -----------
	  water current


		coldrink		pizza
		bottle			(precut - 8 pie)






		     0  1  2  3  4  5  6  7
	int score[]={10,20,30,40,50,60,70,80};


		for(int i=3;i<6;i++)
		{
			score[i];
		}
		
		for(int x : score )
		{
			x
		}
	














	

